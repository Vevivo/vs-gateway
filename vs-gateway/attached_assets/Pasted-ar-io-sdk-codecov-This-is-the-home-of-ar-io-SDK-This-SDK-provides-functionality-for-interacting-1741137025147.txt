ar.io/sdk
codecov

This is the home of ar.io SDK. This SDK provides functionality for interacting with the ar.io ecosystem of services (e.g. gateways and observers) and protocols (e.g. ArNS and AO). It is available for both NodeJS and Web environments.

Table of Contents
Table of Contents
Prerequisites
Installation
Quick Start
Usage
Networks (Mainnet, Testnet, etc.)
Web
Bundlers (Webpack, Rollup, ESbuild, etc.)
Browser
Node
ESM (NodeNext)
CJS
Typescript
ARIOToken & mARIOToken
Converting ARIO to mARIO
ARIO Process
General
init({ signer })
getInfo()
getTokenSupply()
getBalance({ address })
getBalances({ cursor, limit, sortBy, sortOrder })
transfer({ target, qty })
Vaults
getVault({ address, vaultId })
getVaults({ cursor, limit, sortBy, sortOrder })
vaultedTransfer({ recipient, quantity, lockLengthMs, revokable })
revokeVault({ recipient, vaultId })
createVault({ lockLengthMs, quantity })
extendVault({ vaultId, extendLengthMs })
increaseVault({ vaultId, quantity })
Gateways
getGateway({ address })
getGateways({ cursor, limit, sortBy, sortOrder })
getGatewayDelegates({ address, cursor, limit, sortBy, sortOrder })
joinNetwork(params)
leaveNetwork()
updateGatewaySettings({ ...settings })
increaseDelegateStake({ target, qty })
decreaseDelegateStake({ target, qty, instant })
getDelegations({ address, cursor, limit, sortBy, sortOrder })
instantWithdrawal({ gatewayAddress, vaultId })
cancelWithdrawal({ gatewayAddress, vaultId })
getAllowedDelegates({ address, cursor, limit, sortBy, sortOrder })
getGatewayVaults({ address, cursor, limit, sortBy, sortOrder })
getAllGatewayVaults({ cursor, limit, sortBy, sortOrder })
increaseOperatorStake({ qty })
decreaseOperatorStake({ qty })
redelegateStake({ target, source, stakeQty, vaultId })
getRedelegationFee({ address })
getAllDelegates({ cursor, limit, sortBy, sortOrder })
Arweave Name System (ArNS)
buyRecord({ name, type, years, processId })
getArNSRecord({ name })
getArNSRecords({ cursor, limit, sortBy, sortOrder })
increaseUndernameLimit({ name, qty })
extendLease({ name, years })
getTokenCost({ intent, ...args })
getCostDetails({ intent, fromAddress, fundFrom, ...args})
getDemandFactor()
getArNSReturnedNames({ cursor, limit, sortBy, sortOrder })
getArNSReturnedName({ name })
Epochs
getCurrentEpoch()
getEpoch({ epochIndex })
`getEligibleEpochRewards({ epochIndex }, { cursor, limit, sortBy, sortOrder })
getObservations({ epochIndex })
getDistributions({ epochIndex })
saveObservations({ reportTxId, failedGateways })
getPrescribedObservers({ epochIndex })
Primary Names
getPrimaryNames({ cursor, limit, sortBy, sortOrder })
getPrimaryName({ name, address })
requestPrimaryName({ name })
getPrimaryNameRequest({ initiator })
Configuration
Arweave Name Tokens (ANT's)
ANT APIs
init({ processId, signer })
getInfo()
getHandlers()
getState()
getOwner()
getControllers()
getRecords()
transfer({ target })
setController({ controller })
removeController({ controller })
setBaseNameRecord({ transactionId, ttlSeconds })
setUndernameRecord({ undername, transactionId, ttlSeconds })
removeUndernameRecord({ undername })
setRecord({ undername, transactionId, ttlSeconds })
removeRecord({ undername })
setName({ name })
setTicker({ ticker })
setDescription({ description })
setKeywords({ keywords })
getLogo()
setLogo({ txId })
releaseName({ name, arioProcessId })
reassignName({ name, arioProcessId, antProcessId })
approvePrimaryNameRequest({ name, address, arioProcessId })
removePrimaryNames({ names, arioProcessId, notifyOwners })
Configuration
Logging
Pagination
Resources
Bundling
AR.IO Gateways
Running a Gateway
AO
Developers
Requirements
Setup & Build
Testing
Linting & Formatting
Architecture
Prerequisites
node>=v18.0.0
npm or yarn
Installation
npm install @ar.io/sdk
or

yarn add @ar.io/sdk --ignore-engines
Note

The --ignore-engines flag is required when using yarn, as permaweb/aoconnect recommends only the use of npm. Alternatively, you can add a .yarnrc.yml file to your project containing ignore-engines true to ignore the engines check.

Quick Start
import { ARIO } from '@ar.io/sdk';

const ario = ARIO.init(); // defaults to mainnet
const gateways = await ario.getGateways();
Output
Usage
The SDK is provided in both CommonJS and ESM formats and is compatible with bundlers such as Webpack, Rollup, and ESbuild. Utilize the appropriately named exports provided by this SDK's package.json based on your project's configuration. Refer to the examples directory to see how to use the SDK in various environments.

Networks (Mainnet, Testnet, etc.)
The SDK provides the following process IDs for the mainnet and testnet environments:

ARIO_MAINNET_PROCESS_ID - Mainnet ARIO process ID (production)
ARIO_TESTNET_PROCESS_ID - Testnet ARIO process ID (testing and development)
ARIO_DEVNET_PROCESS_ID - Devnet ARIO process ID (for development purposes)
As of v3.8.1 the SDK defaults all API interactions to mainnet. To use the testnet or devnet provide the appropriate ARIO_TESTNET_PROCESS_ID or ARIO_DEVNET_PROCESS_ID when initializing the client.

import {
  ARIO,
  ARIO_DEVNET_PROCESS_ID,
  ARIO_MAINNET_PROCESS_ID,
  ARIO_TESTNET_PROCESS_ID,
} from '@ar.io/sdk';
const ario = ARIO.init({ processId: ARIO_TESTNET_PROCESS_ID }); // use the testnet contract
Web
Bundlers (Webpack, Rollup, ESbuild, etc.)
import { ARIO } from '@ar.io/sdk/web';

// set up client
const ario = ARIO.init();
// fetch gateways
const gateways = await ario.getGateways();
Warning

Polyfills are not provided by default for bundled web projects (Vite, ESBuild, Webpack, Rollup, etc.) . Depending on your apps bundler configuration and plugins, you will need to provide polyfills for various imports including crypto, process and buffer. Refer to examples/webpack and examples/vite for examples. For other project configurations, refer to your bundler's documentation for more information on how to provide the necessary polyfills.

Browser
<script type="module">
  import { ARIO } from 'https://unpkg.com/@ar.io/sdk';

  // set up client
  const ario = ARIO.init();
  // fetch gateways
  const gateways = await ario.getGateways();
</script>
Node
ESM (NodeNext)
import { ARIO } from '@ar.io/sdk/node';

// set up client
const ario = ARIO.init();
// fetch gateways
const gateways = await ario.getGateways();
CJS
import { ARIO } from '@ar.io/sdk';

// set up client
const ario = ARIO.init();
// fetch gateways
const gateways = await ario.getGateways();
Typescript
The SDK provides TypeScript types. When you import the SDK in a TypeScript project types are exported from ./lib/types/[node/web]/index.d.ts and should be automatically recognized by package managers, offering benefits such as type-checking and autocompletion.

Note

Typescript version 5.3 or higher is recommended.

ARIOToken & mARIOToken
The ARIO process stores all values as mARIO (milli-ARIO) to avoid floating-point arithmetic issues. The SDK provides an ARIOToken and mARIOToken classes to handle the conversion between ARIO and mARIO, along with rounding logic for precision.

All process interactions expect values in mARIO. If numbers are provided as inputs, they are assumed to be in raw mARIO values.

Converting ARIO to mARIO
import { ARIOToken, mARIOToken } from '@ar.io/sdk';

const arioValue = 1;
const mARIOValue = new ARIOToken(arioValue).toMARIO();

const mARIOValue = 1_000_000;
const arioValue = new mARIOToken(mARIOValue).toARIO();
ARIO Process
General
init({ signer })
Factory function to that creates a read-only or writeable client. By providing a signer additional write APIs that require signing, like joinNetwork and delegateStake are available. By default, a read-only client is returned and no write APIs are available.

// read-only client
const ario = ARIO.init();

// read-write client for browser environments
const ario = ARIO.init({ signer: new ArConnectSigner(window.arweaveWallet, Arweave.init({}))});

// read-write client for node environments
const ario = ARIO.init({ signer: new ArweaveSigner(JWK) });
getInfo()
Retrieves the information of the ARIO process.

const ario = ARIO.init();
const info = await ario.getInfo();
Output
getTokenSupply()
Retrieves the total supply of tokens, returned in mARIO. The total supply includes the following:

total - the total supply of all tokens
circulating - the total supply minus locked, withdrawn, delegated, and staked
locked - tokens that are locked in the protocol (a.k.a. vaulted)
withdrawn - tokens that have been withdrawn from the protocol by operators and delegators
delegated - tokens that have been delegated to gateways
staked - tokens that are staked in the protocol by gateway operators
protocolBalance - tokens that are held in the protocol's treasury. This is included in the circulating supply.
const ario = ARIO.init();
const supply = await ario.getTokenSupply();
Output
getBalance({ address })
Retrieves the balance of the specified wallet address.

const ario = ARIO.init();
// the balance will be returned in mARIO as a value
const balance = await ario
  .getBalance({
    address: 'QGWqtJdLLgm2ehFWiiPzMaoFLD50CnGuzZIPEdoDRGQ',
  })
  .then((balance: number) => new mARIOToken(balance).toARIO()); // convert it to ARIO for readability
Output
getBalances({ cursor, limit, sortBy, sortOrder })
Retrieves the balances of the ARIO process in mARIO, paginated and sorted by the specified criteria. The cursor used for pagination is the last wallet address from the previous request.

const ario = ARIO.init();
const balances = await ario.getBalances({
  cursor: '-4xgjroXENKYhTWqrBo57HQwvDL51mMdfsdsxJy6Y2Z_sA',
  limit: 100,
  sortBy: 'balance',
  sortOrder: 'desc',
});
Output
transfer({ target, qty })
Transfers mARIO to the designated target recipient address. Requires signer to be provided on ARIO.init to sign the transaction.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.transfer(
  {
    target: '-5dV7nk7waR8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5',
    qty: new ARIOToken(1000).toMARIO(),
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
Vaults
getVault({ address, vaultId })
Retrieves the locked-balance user vault of the ARIO process by the specified wallet address and vault ID.

const ario = ARIO.init();
const vault = await ario.getVault({
  address: 'QGWqtJdLLgm2ehFWiiPzMaoFLD50CnGuzZIPEdoDRGQ',
  vaultId: 'vaultIdOne',
});
Output
getVaults({ cursor, limit, sortBy, sortOrder })
Retrieves all locked-balance user vaults of the ARIO process, paginated and sorted by the specified criteria. The cursor used for pagination is the last wallet address from the previous request.

const ario = ARIO.init();
const vaults = await ario.getVaults({
  cursor: '0',
  limit: 100,
  sortBy: 'balance',
  sortOrder: 'desc',
});
Output
vaultedTransfer({ recipient, quantity, lockLengthMs, revokable })
Transfers mARIO to the designated recipient address and locks the balance for the specified lockLengthMs milliseconds. The revokable flag determines if the vaulted transfer can be revoked by the sender.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({ signer: new ArweaveSigner(jwk) });
const { id: txId } = await ario.vaultedTransfer(
  {
    recipient: '-5dV7nk7waR8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5',
    quantity: new ARIOToken(1000).toMARIO(),
    lockLengthMs: 1000 * 60 * 60 * 24 * 365, // 1 year
    revokable: true,
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
revokeVault({ recipient, vaultId })
Revokes a vaulted transfer by the recipient address and vault ID. Only the sender of the vaulted transfer can revoke it.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.revokeVault({
  recipient: '-5dV7nk7waR8v4STuwPnTck1zFVkQqJh5K9q9Zik4Y5',
  vaultId: 'IPdwa3Mb_9pDD8c2IaJx6aad51Ss-_TfStVwBuhtXMs',
});
createVault({ lockLengthMs, quantity })
Creates a vault for the specified quantity of mARIO from the signer's balance and locks it for the specified lockLengthMs milliseconds.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});

const { id: txId } = await ario.createVault({
  lockLengthMs: 1000 * 60 * 60 * 24 * 365, // 1 year
  quantity: new ARIOToken(1000).toMARIO(),
});
extendVault({ vaultId, extendLengthMs })
Extends the lock length of a signer's vault by the specified extendLengthMs milliseconds.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});

const { id: txId } = await ario.extendVault({
  vaultId: 'vaultIdOne',
  extendLengthMs: 1000 * 60 * 60 * 24 * 365, // 1 year
});
increaseVault({ vaultId, quantity })
Increases the balance of a signer's vault by the specified quantity of mARIO.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});

const { id: txId } = await ario.increaseVault({
  vaultId: 'vaultIdOne',
  quantity: new ARIOToken(1000).toMARIO(),
});
Gateways
getGateway({ address })
Retrieves a gateway's info by its staking wallet address.

const ario = ARIO.init();
const gateway = await ario.getGateway({
  address: '-7vXsQZQDk8TMDlpiSLy3CnLi5PDPlAaN2DaynORpck',
});
Output
getGateways({ cursor, limit, sortBy, sortOrder })
Retrieves registered gateways of the ARIO process, using pagination and sorting by the specified criteria. The cursor used for pagination is the last gateway address from the previous request.

const ario = ARIO.init();
const gateways = await ario.getGateways({
  limit: 100,
  sortOrder: 'desc',
  sortBy: 'operatorStake',
});
Available sortBy options are any of the keys on the gateway object, e.g. operatorStake, start, status, settings.fqdn, settings.label, settings.note, settings.port, settings.protocol, stats.failedConsecutiveEpochs, stats.passedConsecutiveEpochs, etc.

Output
getGatewayDelegates({ address, cursor, limit, sortBy, sortOrder })
Retrieves all delegates for a specific gateway, paginated and sorted by the specified criteria. The cursor used for pagination is the last delegate address from the previous request.

const ario = ARIO.init();
const delegates = await ario.getGatewayDelegates({
  address: 'QGWqtJdLLgm2ehFWiiPzMaoFLD50CnGuzZIPEdoDRGQ',
  limit: 3,
  sortBy: 'startTimestamp',
  sortOrder: 'desc',
});
Output
joinNetwork(params)
Joins a gateway to the ar.io network via its associated wallet.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.joinNetwork(
  {
    qty: new ARIOToken(10_000).toMARIO(), // minimum operator stake allowed
    autoStake: true, // auto-stake operator rewards to the gateway
    allowDelegatedStaking: true, // allows delegated staking
    minDelegatedStake: new ARIOToken(100).toMARIO(), // minimum delegated stake allowed
    delegateRewardShareRatio: 10, // percentage of rewards to share with delegates (e.g. 10%)
    label: 'john smith', // min 1, max 64 characters
    note: 'The example gateway', // max 256 characters
    properties: 'FH1aVetOoulPGqgYukj0VE0wIhDy90WiQoV3U2PeY44', // Arweave transaction ID containing additional properties of the Gateway
    observerWallet: '0VE0wIhDy90WiQoV3U2PeY44FH1aVetOoulPGqgYukj', // wallet address of the observer, must match OBSERVER_WALLET on the observer
    fqdn: 'example.com', // fully qualified domain name - note: you must own the domain and set the OBSERVER_WALLET on your gateway to match `observerWallet`
    port: 443, // port number
    protocol: 'https', // only 'https' is supported
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
leaveNetwork()
Sets the gateway as leaving on the ar.io network. Requires signer to be provided on ARIO.init to sign the transaction. The gateways operator and delegate stakes are vaulted and will be returned after leave periods. The gateway will be removed from the network after the leave period.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});

const { id: txId } = await ario.leaveNetwork(
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
updateGatewaySettings({ ...settings })
Writes new gateway settings to the callers gateway configuration.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.updateGatewaySettings(
  {
    // any other settings you want to update
    minDelegatedStake: new ARIOToken(100).toMARIO(),
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
increaseDelegateStake({ target, qty })
Increases the callers stake on the target gateway.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.increaseDelegateStake(
  {
    target: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
    qty: new ARIOToken(100).toMARIO(),
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
decreaseDelegateStake({ target, qty, instant })
Decreases the callers stake on the target gateway. Can instantly decrease stake by setting instant to true.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.decreaseDelegateStake(
  {
    target: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
    qty: new ARIOToken(100).toMARIO(),
  },
  {
    tags: [{ name: 'App-Name', value: 'My-Awesome-App' }],
  },
);
Pay the early withdrawal fee and withdraw instantly.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.decreaseDelegateStake({
  target: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
  qty: new ARIOToken(100).toMARIO(),
  instant: true, // Immediately withdraw this stake and pay the instant withdrawal fee
});
getDelegations({ address, cursor, limit, sortBy, sortOrder })
Retrieves all active and vaulted stakes across all gateways for a specific address, paginated and sorted by the specified criteria. The cursor used for pagination is the last delegationId (concatenated gateway and startTimestamp of the delgation) from the previous request.

const ario = ARIO.init();
const vaults = await ario.getDelegations({
  address: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
  cursor: 'QGWqtJdLLgm2ehFWiiPzMaoFLD50CnGuzZIPEdoDRGQ_123456789',
  limit: 2,
  sortBy: 'startTimestamp',
  sortOrder: 'asc',
});
Output
instantWithdrawal({ gatewayAddress, vaultId })
Instantly withdraws an existing vault on a gateway. If no gatewayAddress is provided, the signer's address will be used.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({ signer: new ArweaveSigner(jwk) });
// removes a delegated vault from a gateway
const { id: txId } = await ario.instantWithdrawal(
  {
    // gateway address where delegate vault exists
    gatewayAddress: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
    // delegated vault id to cancel
    vaultId: 'fDrr0_J4Iurt7caNST02cMotaz2FIbWQ4Kcj616RHl3',
  },
  // optional additional tags
  {
    tags: [{ name: 'App-Name', value: 'My-Awesome-App' }],
  },
);
// removes an operator vault from a gateway
const { id: txId } = await ario.instantWithdrawal(
  {
    vaultId: 'fDrr0_J4Iurt7caNST02cMotaz2FIbWQ4Kcj616RHl3',
  },
);
cancelWithdrawal({ gatewayAddress, vaultId })
Cancels an existing vault on a gateway. The vaulted stake will be returned to the callers stake. If no gatewayAddress is provided, the signer's address will be used.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({ signer: new ArweaveSigner(jwk) });
// cancels a delegated vault from a gateway
const { id: txId } = await ario.cancelWithdrawal(
  {
    // gateway address where vault exists
    gatewayAddress: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
    // vault id to cancel
    vaultId: 'fDrr0_J4Iurt7caNST02cMotaz2FIbWQ4Kcj616RHl3',
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
// cancels an operator vault from a gateway
const { id: txId } = await ario.cancelWithdrawal(
  {
    // operator vault id to cancel
    vaultId: 'fDrr0_J4Iurt7caNST02cMotaz2FIbWQ4Kcj616RHl3',
  },
);
getAllowedDelegates({ address, cursor, limit, sortBy, sortOrder })
Retrieves all allowed delegates for a specific address. The cursor used for pagination is the last address from the previous request.

const ario = ARIO.init();
const allowedDelegates = await ario.getAllowedDelegates({
  address: 'QGWqtJdLLgm2ehFWiiPzMaoFLD50CnGuzZIPEdoDRGQ',
});
Output
getGatewayVaults({ address, cursor, limit, sortBy, sortOrder })
Retrieves all vaults across all gateways for a specific address, paginated and sorted by the specified criteria. The cursor used for pagination is the last vaultId from the previous request.

const ario = ARIO.init();
const vaults = await ario.getGatewayVaults({
  address: '"PZ5vIhHf8VY969TxBPQN-rYY9CNFP9ggNsMBqlWUzWM',
});
Output
getAllGatewayVaults({ cursor, limit, sortBy, sortOrder })
Retrieves all vaults across all gateways, paginated and sorted by the specified criteria. The cursor used for pagination is the last vaultId from the previous request.

const ario = ARIO.init();
const vaults = await ario.getAllGatewayVaults({
  limit: 1,
  sortBy: 'endTimestamp',
  sortOrder: 'desc',
});
Output
increaseOperatorStake({ qty })
Increases the callers operator stake. Must be executed with a wallet registered as a gateway operator.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.increaseOperatorStake(
  {
    qty: new ARIOToken(100).toMARIO(),
  },
  {
    tags: [{ name: 'App-Name', value: 'My-Awesome-App' }],
  },
);
decreaseOperatorStake({ qty })
Decreases the callers operator stake. Must be executed with a wallet registered as a gateway operator. Requires signer to be provided on ARIO.init to sign the transaction.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.decreaseOperatorStake(
  {
    qty: new ARIOToken(100).toMARIO(),
  },
  {
    tags: [{ name: 'App-Name', value: 'My-Awesome-App' }],
  },
);
redelegateStake({ target, source, stakeQty, vaultId })
Redelegates the stake of a specific address to a new gateway. Vault ID may be optionally included in order to redelegate from an existing withdrawal vault. The redelegation fee is calculated based on the fee rate and the stake amount. Users are allowed one free redelegation every seven epochs. Each additional redelegation beyond the free redelegation will increase the fee by 10%, capping at a 60% redelegation fee.

e.g: If 1000 mARIO is redelegated and the fee rate is 10%, the fee will be 100 mARIO. Resulting in 900 mARIO being redelegated to the new gateway and 100 mARIO being deducted back to the protocol balance.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});

const { id: txId } = await ario.redelegateStake({
  target: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
  source: 'HwFceQaMQnOBgKDpnFqCqgwKwEU5LBme1oXRuQOWSRA',
  stakeQty: new ARIOToken(1000).toMARIO(),
  vaultId: 'fDrr0_J4Iurt7caNST02cMotaz2FIbWQ4Kcj616RHl3',
});
getRedelegationFee({ address })
Retrieves the fee rate as percentage required to redelegate the stake of a specific address. Fee rate ranges from 0% to 60% based on the number of redelegations since the last fee reset.

const ario = ARIO.init();

const fee = await ario.getRedelegationFee({
  address: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
});
Output
getAllDelegates({ cursor, limit, sortBy, sortOrder })
Retrieves all delegates across all gateways, paginated and sorted by the specified criteria. The cursor used for pagination is a cursorId derived from delegate address and the gatewayAddress from the previous request. e.g address_gatewayAddress.

const ario = ARIO.init();
const delegates = await ario.getAllDelegates({
  limit: 2,
  sortBy: 'startTimestamp',
  sortOrder: 'desc',
});
Output
Arweave Name System (ArNS)
buyRecord({ name, type, years, processId })
Purchases a new ArNS record with the specified name, type, and duration.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({ processId: ARIO_DEVNET_PROCESS_ID, signer });
const record = await ario.buyRecord(
  { name: 'ardrive', type: 'lease', years: 1 },
  {
    // optional tags
    tags: [{ name: 'App-Name', value: 'ArNS-App' }],
  },
);
getArNSRecord({ name })
Retrieves the record info of the specified ArNS name.

const ario = ARIO.init();
const record = await ario.getArNSRecord({ name: 'ardrive' });
Output
getArNSRecords({ cursor, limit, sortBy, sortOrder })
Retrieves all registered ArNS records of the ARIO process, paginated and sorted by the specified criteria. The cursor used for pagination is the last ArNS name from the previous request.

const ario = ARIO.init();
// get the newest 100 names
const records = await ario.getArNSRecords({
  limit: 100,
  sortBy: 'startTimestamp',
  sortOrder: 'desc',
});
Available sortBy options are any of the keys on the record object, e.g. name, processId, endTimestamp, startTimestamp, type, undernames.

Output
increaseUndernameLimit({ name, qty })
Increases the undername support of a domain up to a maximum of 10k. Domains, by default, support up to 10 undernames.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.increaseUndernameLimit(
  {
    name: 'ar-io',
    qty: 420,
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
extendLease({ name, years })
Extends the lease of a registered ArNS domain, with an extension of 1-5 years depending on grace period status. Permanently registered domains cannot be extended.

const ario = ARIO.init({
  processId: ARIO_MAINNET_PROCESS_ID,
  signer: new ArweaveSigner(jwk),
});
const { id: txId } = await ario.extendLease(
  {
    name: 'ar-io',
    years: 1,
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
getTokenCost({ intent, ...args })
Calculates the price in mARIO to perform the interaction in question, eg a 'Buy-Name' interaction, where args are the specific params for that interaction.

const price = await ario
  .getTokenCost({
    intent: 'Buy-Name',
    name: 'ar-io',
    type: 'permabuy',
  })
  .then((p) => new mARIOToken(p).toARIO()); // convert to ARIO for readability
Output
getCostDetails({ intent, fromAddress, fundFrom, ...args})
Calculates the expanded cost details for the interaction in question, e.g a 'Buy-Name' interaction, where args are the specific params for that interaction. The fromAddress is the address that would be charged for the interaction, and fundFrom is where the funds would be taken from, either balance, stakes, or any.

const costDetails = await ario.getCostDetails({
  intent: 'Buy-Name',
  fromAddress: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
  fundFrom: 'stakes',
  name: 'ar-io',
  type: 'permabuy',
});
Output
getDemandFactor()
Retrieves the current demand factor of the network. The demand factor is a multiplier applied to the cost of ArNS interactions based on the current network demand.

const ario = ARIO.init();
const demandFactor = await ario.getDemandFactor();
Output
getArNSReturnedNames({ cursor, limit, sortBy, sortOrder })
Retrieves all active returned names of the ARIO process, paginated and sorted by the specified criteria. The cursor used for pagination is the last returned name from the previous request.

const ario = ARIO.init();
const returnedNames = await ario.getArNSReturnedNames({
  limit: 100,
  sortBy: 'endTimestamp',
  sortOrder: 'asc', // return the returned names ending soonest first
});
Output
getArNSReturnedName({ name })
Retrieves the returned name data for the specified returned name.

const ario = ARIO.init();
const returnedName = await ario.getArNSReturnedName({ name: 'permalink' });
Output
Epochs
getCurrentEpoch()
Returns the current epoch data.

const ario = ARIO.init();
const epoch = await ario.getCurrentEpoch();
Output
getEpoch({ epochIndex })
Returns the epoch data for the specified block height. If no epoch index is provided, the current epoch is used.

const ario = ARIO.init();
const epoch = await ario.getEpoch({ epochIndex: 0 });
Output
`getEligibleEpochRewards({ epochIndex }, { cursor, limit, sortBy, sortOrder })
Returns the eligible epoch rewards for the specified block height. If no epoch index is provided, the current epoch is used.

const ario = ARIO.init();
const rewards = await ario.getEligibleEpochRewards({ epochIndex: 0 });
Output
getObservations({ epochIndex })
Returns the epoch-indexed observation list. If no epoch index is provided, the current epoch is used.

const ario = ARIO.init();
const observations = await ario.getObservations();
Output
getDistributions({ epochIndex })
Returns the current rewards distribution information. If no epoch index is provided, the current epoch is used.

const ario = ARIO.init();
const distributions = await ario.getDistributions({ epochIndex: 0 });
Output
getPrescribedObservers({ epochIndex })
Retrieves the prescribed observers of the ARIO process. To fetch prescribed observers for a previous epoch set the epochIndex to the desired epoch index.

const ario = ARIO.init();
const observers = await ario.getPrescribedObservers({ epochIndex: 0 });
Output
Primary Names
getPrimaryNames({ cursor, limit, sortBy, sortOrder })
Retrieves all primary names paginated and sorted by the specified criteria. The cursor used for pagination is the last name from the previous request.

const ario = ARIO.init();
const names = await ario.getPrimaryNames({
  cursor: 'ao', // this is the last name from the previous request
  limit: 1,
  sortBy: 'startTimestamp',
  sortOrder: 'desc',
});
Output
getPrimaryName({ name, address })
Retrieves the primary name for a given name or address.

const ario = ARIO.init();
const name = await ario.getPrimaryName({
  name: 'arns',
});
// or
const name = await ario.getPrimaryName({
  address: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
});
Output
requestPrimaryName({ name })
Requests a primary name for the caller's address. The request must be approved by the new owner of the requested name via the approvePrimaryNameRequest[#approveprimarynamerequest-name-address-] API.

Note: Requires signer to be provided on ARIO.init to sign the transaction.

const ario = ARIO.init({ signer: new ArweaveSigner(jwk) });
const { id: txId } = await ario.requestPrimaryName({
  name: 'arns',
});
getPrimaryNameRequest({ initiator })
Retrieves the primary name request for a a wallet address.

const ario = ARIO.init();
const request = await ario.getPrimaryNameRequest({
  initiator: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3',
});
Output
Configuration
The ARIO client class exposes APIs relevant to the ar.io process. It can be configured to use any AO Process ID that adheres to the ARIO Network Spec. By default, it will use the current ARIO Testnet Process. Refer to AO Connect for more information on how to configure an ARIO process to use specific AO infrastructure.

import { ARIO } from '@ar.io/sdk';
import { connect } from '@permaweb/aoconnect';

// provide a custom ao infrastructure and process id
const ario = ARIO.init({
  process: new AoProcess({
    processId: 'ARIO_PROCESS_ID'
    ao: connect({
      MU_URL: 'https://mu-testnet.xyz',
      CU_URL: 'https://cu-testnet.xyz',
      GRAPHQL_URL: 'https://arweave.net/graphql',
      GATEWAY_URL: 'https://arweave.net',
    })
  })
});
Arweave Name Tokens (ANT's)
The ANT client class exposes APIs relevant to compliant Arweave Name Token processes. It can be configured to use any process ID that adheres to the ANT process spec. You must provide either a custom process data provider or a processId to the ANT class constructor to use.

ANT APIs
init({ processId, signer })
Factory function to that creates a read-only or writeable client. By providing a signer additional write APIs that require signing, like setRecord and transfer are available. By default, a read-only client is returned and no write APIs are available.

// in a browser environment with ArConnect
const ant = ANT.init({
  signer: new ArConnectSigner(window.arweaveWallet, Arweave.init({})),
  processId: 'bh9l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM'
});

// in a node environment
const ant = ANT.init({
  signer: new ArweaveSigner(JWK),
  processId: 'bh9l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM'
});
getInfo()
Retrieves the information of the ANT process.

const info = await ant.getInfo();
Output
getHandlers()
Retrieves the handlers supported on the ANT

const handlers = await ant.getHandlers();
Output
getState()
Retrieves the state of the ANT process.

const state = await ant.getState();
Output
getOwner()
Returns the owner of the configured ANT process.

const owner = await ant.getOwner();
Output
getControllers()
Returns the controllers of the configured ANT process.

const controllers = await ant.getControllers();
Output
getRecords()
Returns all records on the configured ANT process, including the required @ record that resolve connected ArNS names.

const records = await ant.getRecords();
Output
transfer({ target })
Transfers ownership of the ANT to a new target address. Target MUST be an Arweave address.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.transfer(
  { target: 'aGzM_yjralacHIUo8_nQXMbh9l1cy0aksiL_x9M359f' },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
setController({ controller })
Adds a new controller to the list of approved controllers on the ANT. Controllers can set records and change the ticker and name of the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.setController(
  { controller: 'aGzM_yjralacHIUo8_nQXMbh9l1cy0aksiL_x9M359f' },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
removeController({ controller })
Removes a controller from the list of approved controllers on the ANT.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.removeController(
  { controller: 'aGzM_yjralacHIUo8_nQXMbh9l1cy0aksiL_x9M359f' },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
setBaseNameRecord({ transactionId, ttlSeconds })
Adds or updates the base name record for the ANT. This is the top level name of the ANT (e.g. ardrive.ar.io)

Note: Requires signer to be provided on ANT.init to sign the transaction.

// get the ant for the base name
const arnsRecord = await ario.getArNSRecord({ name: 'ardrive' });
const ant = await ANT.init({ processId: arnsName.processId });
const { id: txId } = await ant.setBaseNameRecord({
  transactionId: '432l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM',
  ttlSeconds: 3600,
});

// ardrive.ar.io will now resolve to the provided 432l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM transaction id
setUndernameRecord({ undername, transactionId, ttlSeconds })
Adds or updates an undername record for the ANT. An undername is appended to the base name of the ANT (e.g. dapp_ardrive.ar.io)

Note: Requires signer to be provided on ANT.init to sign the transaction.

Records, or undernames are configured with the transactionId - the arweave transaction id the record resolves - and ttlSeconds, the Time To Live in the cache of client applications.

const arnsRecord = await ario.getArNSRecord({ name: 'ardrive' });
const ant = await ANT.init({ processId: arnsName.processId });
const { id: txId } = await ant.setUndernameRecord(
  {
    undername: 'dapp',
    transactionId: '432l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM',
    ttlSeconds: 900,
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);

// dapp_ardrive.ar.io will now resolve to the provided 432l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM transaction id
removeUndernameRecord({ undername })
Removes an undername record from the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.removeUndernameRecord(
  { undername: 'dapp' },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);

// dapp_ardrive.ar.io will no longer resolve to the provided transaction id
setRecord({ undername, transactionId, ttlSeconds })
Warning

Deprecated: Use setBaseNameRecord or setUndernameRecord instead.

Adds or updates a record for the ANT process. The undername parameter is used to specify the record name. Use @ for the base name record.

Note: Requires signer to be provided on ANT.init to sign the transaction.

Records, or undernames are configured with the transactionId - the arweave transaction id the record resolves - and ttlSeconds, the Time To Live in the cache of client applications.

const { id: txId } = await ant.setRecord(
  {
    undername: '@',
    transactionId: '432l1cy0aksiL_x9M359faGzM_yjralacHIUo8_nQXM'
    ttlSeconds: 3600
  },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
removeRecord({ undername })
Warning

Deprecated: Use removeUndernameRecord instead.

Removes a record from the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const arnsRecord = await ario.getArNSRecord({ name: 'ardrive' });
const ant = await ANT.init({ processId: arnsName.processId });
const { id: txId } = await ant.removeRecord(
  { undername: 'dapp' },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);

// dapp_ardrive.ar.io will no longer resolve to the provided transaction id
setName({ name })
Sets the name of the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.setName(
  { name: 'My ANT' },
  // optional additional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
setTicker({ ticker })
Sets the ticker of the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.setTicker(
  { ticker: 'ANT-NEW-TICKER' },
  // optional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
setDescription({ description })
Sets the description of the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.setDescription(
  { description: 'A friendly description of this ANT' },
  // optional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
setKeywords({ keywords })
Sets the keywords of the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.setDescription(
  { keywords: ['Game', 'FPS', 'AO'] },
  // optional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
getLogo()
Returns the TX ID of the logo set for the ANT.

const logoTxId = await ant.getLogo();
setLogo({ txId })
Sets the Logo of the ANT - logo should be an Arweave transaction ID.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.setLogo(
  { txId: 'U7RXcpaVShG4u9nIcPVmm2FJSM5Gru9gQCIiRaIPV7f' },
  // optional tags
  { tags: [{ name: 'App-Name', value: 'My-Awesome-App' }] },
);
releaseName({ name, arioProcessId })
Releases a name from the current owner and makes it available for purchase on the ARIO contract. The name must be permanently owned by the releasing wallet. If purchased within the recently returned name period (14 epochs), 50% of the purchase amount will be distributed to the ANT owner at the time of release. If no purchases in the recently returned name period, the name can be reregistered by anyone for the normal fee.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.releaseName({
  name: 'permalink',
  arioProcessId: ARIO_MAINNET_PROCESS_ID, // releases the name owned by the ANT and sends it to recently returned names on the ARIO contract
});
reassignName({ name, arioProcessId, antProcessId })
Reassigns a name to a new ANT. This can only be done by the current owner of the ANT.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.reassignName({
  name: 'ardrive',
  arioProcessId: ARIO_MAINNET_PROCESS_ID,
  antProcessId: NEW_ANT_PROCESS_ID, // the new ANT process id that will take over ownership of the name
});
approvePrimaryNameRequest({ name, address, arioProcessId })
Approves a primary name request for a given name or address.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.approvePrimaryNameRequest({
  name: 'arns',
  address: 't4Xr0_J4Iurt7caNST02cMotaz2FIbWQ4Kbj616RHl3', // must match the request initiator address
  arioProcessId: ARIO_MAINNET_PROCESS_ID, // the ARIO process id to use for the request
});
removePrimaryNames({ names, arioProcessId, notifyOwners })
Removes primary names from the ANT process.

Note: Requires signer to be provided on ANT.init to sign the transaction.

const { id: txId } = await ant.removePrimaryNames({
  names: ['arns', 'test_arns'], // any primary names associated with a base name controlled by this ANT will be removed
  arioProcessId: ARIO_MAINNET_PROCESS_ID,
  notifyOwners: true, // if true, the owners of the removed names will be send AO messages to notify them of the removal
});
Configuration
ANT clients can be configured to use custom AO process. Refer to AO Connect for more information on how to configure the AO process to use specific AO infrastructure.

const ant = ANT.init({
  process: new AoProcess({
    processId: 'ANT_PROCESS_ID'
    ao: connect({
      MU_URL: 'https://mu-testnet.xyz',
      CU_URL: 'https://cu-testnet.xyz',
      GRAPHQL_URL: 'https://arweave.net/graphql',
      GATEWAY_URL: 'https://arweave.net',
    })
  })
});
Logging
The library uses the Winston logger for node based projects, and console logger for web based projects by default. You can configure the log level via setLogLevel() API. Alternatively you can set a custom logger as the default logger so long as it satisfes the ILogger interface.

import { Logger } from '@ar.io/sdk';

// set the log level
Logger.default.setLogLevel('debug');

// provide your own logger
Logger.default = winston.createLogger({ ...loggerConfigs }); // or some other logger that satisifes ILogger interface
Pagination
Certain APIs that could return a large amount of data are paginated using cursors. The SDK uses the cursor pattern (as opposed to pages) to better protect against changing data while paginating through a list of items. For more information on pagination strategies refer to this article.

Paginated results include the following properties:

items: the list of items on the current request, defaulted to 100 items.
nextCursor: the cursor to use for the next batch of items. This is undefined if there are no more items to fetch.
hasMore: a boolean indicating if there are more items to fetch. This is false if there are no more items to fetch.
totalItems: the total number of items available. This may change as new items are added to the list, only use this for informational purposes.
sortBy: the field used to sort the items, by default this is startTimestamp.
sortOrder: the order used to sort the items, by default this is desc.
To request all the items in a list, you can iterate through the list using the nextCursor until hasMore is false.

let hasMore = true;
let cursor: string | undefined;
const gateaways = [];
while (hasMore) {
  const page = await ario.getGateways({ limit: 100, cursor });
  gateaways.push(...items);
  cursor = page.nextCursor;
  hasMore = page.hasMore;
}
Resources
Bundling
For ANS-104 bundling compatible with ar.io gateways, we recommend using turbo-sdk. Turbo SDK provides efficient and reliable methods for creating and uploading data bundles to the Arweave network, which are fully compatible with ar.io gateways. Turbo supports fiat and crypto bundling and uploading with a focus on ease of use and reliability.

AR.IO Gateways
Running a Gateway
To run your own ar.io gateway, you can refer to the following resources:

ar-io-node repository: This repository contains the source code and instructions for setting up and running an ar.io gateway node.
ar.io Gateway Documentation: This comprehensive guide provides detailed information on gateway setup, configuration, and management.
Running your own gateway allows you to participate in the ar.io network, serve Arweave data, and potentially earn rewards. Make sure to follow the official documentation for the most up-to-date and accurate information on gateway operation.

AO
This library integrates with AO, a decentralized compute platform built on Arweave. We utilize AO Connect to interact with AO processes and messages. This integration allows for seamless communication with the AO network, enabling developers to leverage decentralized computation and storage capabilities in their applications.

For more information on how to use AO and AO Connect within this library, please refer to our documentation and examples.

Developers
Requirements
node >= 18.0.0
npm or yarn
docker (recommended for testing)
Setup & Build
nvm use - use the correct node version
yarn install - installs dependencies
yarn build - builds web/node/bundled outputs
Testing
yarn test - runs e2e tests and unit tests
yarn test:e2e - runs e2e tests
yarn test:unit - runs unit tests
yarn example:web - opens up the example web page
yarn example:cjs - runs example CJS node script
yarn example:esm - runs example ESM node script
yarn example:vite - runs example Vite web page
Linting & Formatting
yarn lint:check - checks for linting errors
yarn lint:fix - fixes linting errors
yarn format:check - checks for formatting errors
yarn format:fix - fixes formatting errors
Architecture
Code to interfaces.
Prefer type safety over runtime safety.
Prefer composition over inheritance.
Prefer integration tests over unit tests.